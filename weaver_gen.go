// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package main

import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

var _ codegen.LatestVersion = codegen.Version[[0][17]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.18.0 (codegen
version v0.17.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "sudocu/ADocRepository",
		Iface: reflect.TypeOf((*ADocRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(aDocRepository{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return aDocRepository_local_stub{impl: impl.(ADocRepository), tracer: tracer, getFilesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "GetFiles", Remote: false}), readExampleJSONMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "ReadExampleJSON", Remote: false}), readFileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "ReadFile", Remote: false}), saveVariantForFileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "SaveVariantForFile", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return aDocRepository_client_stub{stub: stub, getFilesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "GetFiles", Remote: true}), readExampleJSONMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "ReadExampleJSON", Remote: true}), readFileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "ReadFile", Remote: true}), saveVariantForFileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ADocRepository", Method: "SaveVariantForFile", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return aDocRepository_server_stub{impl: impl.(ADocRepository), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "sudocu/ChatGPTRepository",
		Iface: reflect.TypeOf((*ChatGPTRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(chatGPTRepository{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return chatGPTRepository_local_stub{impl: impl.(ChatGPTRepository), tracer: tracer, changeMarkupMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ChatGPTRepository", Method: "ChangeMarkup", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return chatGPTRepository_client_stub{stub: stub, changeMarkupMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/ChatGPTRepository", Method: "ChangeMarkup", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return chatGPTRepository_server_stub{impl: impl.(ChatGPTRepository), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:      "github.com/ServiceWeaver/weaver/Main",
		Iface:     reflect.TypeOf((*weaver.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(app{}),
		Listeners: []string{"listener"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(weaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(weaver.Main), addLoad: addLoad}
		},
		RefData: "⟦9fd5554a:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→sudocu/PDFGenerator⟧\n⟦f9992206:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→sudocu/ADocRepository⟧\n⟦2a7c5efa:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→sudocu/ChatGPTRepository⟧\n⟦fbea1504:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→sudocu/SpeechRepository⟧\n⟦2248fb79:wEaVeRlIsTeNeRs:github.com/ServiceWeaver/weaver/Main→listener⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "sudocu/PDFGenerator",
		Iface: reflect.TypeOf((*PDFGenerator)(nil)).Elem(),
		Impl:  reflect.TypeOf(pdfGenerator{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return pDFGenerator_local_stub{impl: impl.(PDFGenerator), tracer: tracer, generatePDFMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/PDFGenerator", Method: "GeneratePDF", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return pDFGenerator_client_stub{stub: stub, generatePDFMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/PDFGenerator", Method: "GeneratePDF", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return pDFGenerator_server_stub{impl: impl.(PDFGenerator), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "sudocu/SpeechRepository",
		Iface: reflect.TypeOf((*SpeechRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(speechRepository{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return speechRepository_local_stub{impl: impl.(SpeechRepository), tracer: tracer, speechToTextMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/SpeechRepository", Method: "SpeechToText", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return speechRepository_client_stub{stub: stub, speechToTextMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "sudocu/SpeechRepository", Method: "SpeechToText", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return speechRepository_server_stub{impl: impl.(SpeechRepository), addLoad: addLoad}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[ADocRepository] = (*aDocRepository)(nil)
var _ weaver.InstanceOf[ChatGPTRepository] = (*chatGPTRepository)(nil)
var _ weaver.InstanceOf[weaver.Main] = (*app)(nil)
var _ weaver.InstanceOf[PDFGenerator] = (*pdfGenerator)(nil)
var _ weaver.InstanceOf[SpeechRepository] = (*speechRepository)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*aDocRepository)(nil)
var _ weaver.Unrouted = (*chatGPTRepository)(nil)
var _ weaver.Unrouted = (*app)(nil)
var _ weaver.Unrouted = (*pdfGenerator)(nil)
var _ weaver.Unrouted = (*speechRepository)(nil)

// Local stub implementations.

type aDocRepository_local_stub struct {
	impl                      ADocRepository
	tracer                    trace.Tracer
	getFilesMetrics           *codegen.MethodMetrics
	readExampleJSONMetrics    *codegen.MethodMetrics
	readFileMetrics           *codegen.MethodMetrics
	saveVariantForFileMetrics *codegen.MethodMetrics
}

// Check that aDocRepository_local_stub implements the ADocRepository interface.
var _ ADocRepository = (*aDocRepository_local_stub)(nil)

func (s aDocRepository_local_stub) GetFiles(ctx context.Context) (r0 []string, err error) {
	// Update metrics.
	begin := s.getFilesMetrics.Begin()
	defer func() { s.getFilesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.ADocRepository.GetFiles", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetFiles(ctx)
}

func (s aDocRepository_local_stub) ReadExampleJSON(ctx context.Context, a0 string) (r0 []byte, err error) {
	// Update metrics.
	begin := s.readExampleJSONMetrics.Begin()
	defer func() { s.readExampleJSONMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.ADocRepository.ReadExampleJSON", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadExampleJSON(ctx, a0)
}

func (s aDocRepository_local_stub) ReadFile(ctx context.Context, a0 string) (r0 []byte, err error) {
	// Update metrics.
	begin := s.readFileMetrics.Begin()
	defer func() { s.readFileMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.ADocRepository.ReadFile", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ReadFile(ctx, a0)
}

func (s aDocRepository_local_stub) SaveVariantForFile(ctx context.Context, a0 string, a1 []byte) (err error) {
	// Update metrics.
	begin := s.saveVariantForFileMetrics.Begin()
	defer func() { s.saveVariantForFileMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.ADocRepository.SaveVariantForFile", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.SaveVariantForFile(ctx, a0, a1)
}

type chatGPTRepository_local_stub struct {
	impl                ChatGPTRepository
	tracer              trace.Tracer
	changeMarkupMetrics *codegen.MethodMetrics
}

// Check that chatGPTRepository_local_stub implements the ChatGPTRepository interface.
var _ ChatGPTRepository = (*chatGPTRepository_local_stub)(nil)

func (s chatGPTRepository_local_stub) ChangeMarkup(ctx context.Context, a0 string, a1 string) (r0 []byte, err error) {
	// Update metrics.
	begin := s.changeMarkupMetrics.Begin()
	defer func() { s.changeMarkupMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.ChatGPTRepository.ChangeMarkup", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ChangeMarkup(ctx, a0, a1)
}

type main_local_stub struct {
	impl   weaver.Main
	tracer trace.Tracer
}

// Check that main_local_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_local_stub)(nil)

type pDFGenerator_local_stub struct {
	impl               PDFGenerator
	tracer             trace.Tracer
	generatePDFMetrics *codegen.MethodMetrics
}

// Check that pDFGenerator_local_stub implements the PDFGenerator interface.
var _ PDFGenerator = (*pDFGenerator_local_stub)(nil)

func (s pDFGenerator_local_stub) GeneratePDF(ctx context.Context, a0 []byte, a1 []byte) (r0 []byte, err error) {
	// Update metrics.
	begin := s.generatePDFMetrics.Begin()
	defer func() { s.generatePDFMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.PDFGenerator.GeneratePDF", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GeneratePDF(ctx, a0, a1)
}

type speechRepository_local_stub struct {
	impl                SpeechRepository
	tracer              trace.Tracer
	speechToTextMetrics *codegen.MethodMetrics
}

// Check that speechRepository_local_stub implements the SpeechRepository interface.
var _ SpeechRepository = (*speechRepository_local_stub)(nil)

func (s speechRepository_local_stub) SpeechToText(ctx context.Context, a0 []byte) (r0 string, err error) {
	// Update metrics.
	begin := s.speechToTextMetrics.Begin()
	defer func() { s.speechToTextMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.SpeechRepository.SpeechToText", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.SpeechToText(ctx, a0)
}

// Client stub implementations.

type aDocRepository_client_stub struct {
	stub                      codegen.Stub
	getFilesMetrics           *codegen.MethodMetrics
	readExampleJSONMetrics    *codegen.MethodMetrics
	readFileMetrics           *codegen.MethodMetrics
	saveVariantForFileMetrics *codegen.MethodMetrics
}

// Check that aDocRepository_client_stub implements the ADocRepository interface.
var _ ADocRepository = (*aDocRepository_client_stub)(nil)

func (s aDocRepository_client_stub) GetFiles(ctx context.Context) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getFilesMetrics.Begin()
	defer func() { s.getFilesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.ADocRepository.GetFiles", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s aDocRepository_client_stub) ReadExampleJSON(ctx context.Context, a0 string) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readExampleJSONMetrics.Begin()
	defer func() { s.readExampleJSONMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.ADocRepository.ReadExampleJSON", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

func (s aDocRepository_client_stub) ReadFile(ctx context.Context, a0 string) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.readFileMetrics.Begin()
	defer func() { s.readFileMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.ADocRepository.ReadFile", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

func (s aDocRepository_client_stub) SaveVariantForFile(ctx context.Context, a0 string, a1 []byte) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.saveVariantForFileMetrics.Begin()
	defer func() { s.saveVariantForFileMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.ADocRepository.SaveVariantForFile", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + (len(a1) * 1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	serviceweaver_enc_slice_byte_87461245(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type chatGPTRepository_client_stub struct {
	stub                codegen.Stub
	changeMarkupMetrics *codegen.MethodMetrics
}

// Check that chatGPTRepository_client_stub implements the ChatGPTRepository interface.
var _ ChatGPTRepository = (*chatGPTRepository_client_stub)(nil)

func (s chatGPTRepository_client_stub) ChangeMarkup(ctx context.Context, a0 string, a1 string) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.changeMarkupMetrics.Begin()
	defer func() { s.changeMarkupMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.ChatGPTRepository.ChangeMarkup", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

type main_client_stub struct {
	stub codegen.Stub
}

// Check that main_client_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_client_stub)(nil)

type pDFGenerator_client_stub struct {
	stub               codegen.Stub
	generatePDFMetrics *codegen.MethodMetrics
}

// Check that pDFGenerator_client_stub implements the PDFGenerator interface.
var _ PDFGenerator = (*pDFGenerator_client_stub)(nil)

func (s pDFGenerator_client_stub) GeneratePDF(ctx context.Context, a0 []byte, a1 []byte) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.generatePDFMetrics.Begin()
	defer func() { s.generatePDFMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.PDFGenerator.GeneratePDF", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + (len(a0) * 1))
	size += (4 + (len(a1) * 1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	serviceweaver_enc_slice_byte_87461245(enc, a0)
	serviceweaver_enc_slice_byte_87461245(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

type speechRepository_client_stub struct {
	stub                codegen.Stub
	speechToTextMetrics *codegen.MethodMetrics
}

// Check that speechRepository_client_stub implements the SpeechRepository interface.
var _ SpeechRepository = (*speechRepository_client_stub)(nil)

func (s speechRepository_client_stub) SpeechToText(ctx context.Context, a0 []byte) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.speechToTextMetrics.Begin()
	defer func() { s.speechToTextMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.SpeechRepository.SpeechToText", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + (len(a0) * 1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	serviceweaver_enc_slice_byte_87461245(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

// Server stub implementations.

type aDocRepository_server_stub struct {
	impl    ADocRepository
	addLoad func(key uint64, load float64)
}

// Check that aDocRepository_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*aDocRepository_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s aDocRepository_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetFiles":
		return s.getFiles
	case "ReadExampleJSON":
		return s.readExampleJSON
	case "ReadFile":
		return s.readFile
	case "SaveVariantForFile":
		return s.saveVariantForFile
	default:
		return nil
	}
}

func (s aDocRepository_server_stub) getFiles(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetFiles(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s aDocRepository_server_stub) readExampleJSON(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ReadExampleJSON(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s aDocRepository_server_stub) readFile(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ReadFile(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s aDocRepository_server_stub) saveVariantForFile(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 []byte
	a1 = serviceweaver_dec_slice_byte_87461245(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.SaveVariantForFile(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type chatGPTRepository_server_stub struct {
	impl    ChatGPTRepository
	addLoad func(key uint64, load float64)
}

// Check that chatGPTRepository_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*chatGPTRepository_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s chatGPTRepository_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ChangeMarkup":
		return s.changeMarkup
	default:
		return nil
	}
}

func (s chatGPTRepository_server_stub) changeMarkup(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ChangeMarkup(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type main_server_stub struct {
	impl    weaver.Main
	addLoad func(key uint64, load float64)
}

// Check that main_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*main_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type pDFGenerator_server_stub struct {
	impl    PDFGenerator
	addLoad func(key uint64, load float64)
}

// Check that pDFGenerator_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*pDFGenerator_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s pDFGenerator_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GeneratePDF":
		return s.generatePDF
	default:
		return nil
	}
}

func (s pDFGenerator_server_stub) generatePDF(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 []byte
	a0 = serviceweaver_dec_slice_byte_87461245(dec)
	var a1 []byte
	a1 = serviceweaver_dec_slice_byte_87461245(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GeneratePDF(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type speechRepository_server_stub struct {
	impl    SpeechRepository
	addLoad func(key uint64, load float64)
}

// Check that speechRepository_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*speechRepository_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s speechRepository_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "SpeechToText":
		return s.speechToText
	default:
		return nil
	}
}

func (s speechRepository_server_stub) speechToText(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 []byte
	a0 = serviceweaver_dec_slice_byte_87461245(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.SpeechToText(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}
